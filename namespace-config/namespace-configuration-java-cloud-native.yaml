apiVersion: redhatcop.redhat.io/v1alpha1
kind: NamespaceConfig
metadata:
  name: tekton-pipeline-java-gitlab
spec:
  labelSelector:
    matchLabels:
      tekton-java-gitlab: ""
  templates:
  - objectTemplate: |
      apiVersion: tekton.dev/v1beta1
      kind: Pipeline
      metadata:
        name: build-and-deploy-java-cloud-native
        namespace: {{ .Name }}
      spec:
        params:
        - name: app-name
          type: string
          description: "Application Name"
        - name: build-type
          type: string
          description: "Selected build type: quarkus-jvm, quarkus-fast-jar, quarkus-native, spring-boot"
        - name: git-repo-url
          type: string
          description: "Git Repository URL"
        - name: git-checkout-sha
          type: string
          description: "Git SHA to checkout"
          default: "main"
        - name: config-git-repo-url
          type: string
          description: "Config Git Repository URL"
        - name: config-git-branch
          type: string
          description: "Config Git Branch to clone"
          default: "main"
        - name: config-git-path
          type: string
          description: "Config Git Path"
          default: "/"
        tasks:
        - name: build
          taskRef:
            name: build-java-cloud-native
          params:
          - name: app-name
            value: $(params.app-name)
          - name: build-type
            value: $(params.build-type)
          - name: git-repo-url
            value: $(params.git-repo-url)
          - name: git-checkout-sha
            value: $(params.git-checkout-sha)
        - name: config
          taskRef:
            name: config-app
          runAfter:
          - build
          params:
          - name: app-name
            value: $(params.app-name)
          - name: config-git-repo-url
            value: $(params.config-git-repo-url)
          - name: config-git-branch
            value: $(params.config-git-branch)
          - name: config-git-path
            value: $(params.config-git-path)
        - name: deploy
          taskRef:
            name: deploy-app
          runAfter:
          - config
          params:
          - name: app-name
            value: $(params.app-name)
  - objectTemplate: |
      apiVersion: tekton.dev/v1beta1
      kind: Task
      metadata:
        name: build-java-cloud-native
        namespace: {{ .Name }}
      spec:
        stepTemplate:
          volumeMounts:
          - name: varlibc
            mountPath: /var/lib/containers
          - name: maven-settings
            mountPath: /tmp/maven-settings
        params:
        - name: app-name
          type: string
          description: "Application Name"
        - name: build-type
          type: string
          description: "Selected build type: quarkus-jvm, quarkus-fast-jar, quarkus-native, spring-boot"
        - name: git-repo-url
          type: string
          description: "Git Repository URL"
        - name: git-checkout-sha
          type: string
          description: "Git SHA to checkout"
          default: "main"
        - name: tlsVerify
          description: tls verify
          type: string
          default: "false"
        steps:
        - name: prep-build
          image: image-registry.openshift-image-registry.svc:5000/openshift/maven-jdk-mandrel-builder:latest
          imagePullPolicy: Always
          script: |
            mkdir -p /workspace/source
            cd /workspace/source
            git init
            git remote add origin $(params.git-repo-url)
            git pull origin $(params.git-checkout-sha)
            cp /tmp/maven-settings/settings.xml /workspace/source
          env:
          - name: user.home
            value: /tekton/home
          workingDir: "/"
        - name: build-sources
          image: image-registry.openshift-image-registry.svc:5000/openshift/maven-jdk-mandrel-builder:latest
          imagePullPolicy: Always
          script: |
            MVN_ARGS="-DskipTests -Dmaven.wagon.http.ssl.insecure=true -ssettings.xml -DappName=app"
            case $(params.build-type) in
              spring-boot)
              ;;
              quarkus-jvm)
              ;;
              quarkus-fast-jar)
              MVN_ARGS="${MVN_ARGS} -Dquarkus.package.type=fast-jar"
              ;;
              quarkus-native)
              MVN_ARGS="${MVN_ARGS} -Pnative"
              ;;
            esac
            mvn ${MVN_ARGS} clean package
          env:
          - name: user.home
            value: /tekton/home
          workingDir: "/workspace/source"
        - name: build-image
          image: image-registry.openshift-image-registry.svc:5000/openshift/buildah:nonroot
          imagePullPolicy: Always
          script: |
            echo "tekton:x:$(id -u):0:tekton user:${HOME}:/sbin/nologin" >> /etc/passwd
            echo $(id -u):1100000000:65536 >> /etc/subuid
            echo $(id -u):1100000000:65536 >> /etc/subgid
            export BUILDAH_ISOLATION=chroot
            mkdir -p ${HOME}/.config/containers
            echo "[storage]" > ${HOME}/.config/containers/storage.conf
            echo "driver=\"vfs\"" >> ${HOME}/.config/containers/storage.conf
            DESTINATION_IMAGE="image-registry.openshift-image-registry.svc:5000/$(context.taskRun.namespace)/$(params.app-name):latest"
            if [[ $(params.build-type) == "quarkus-native" ]]
            then
              CONTAINER=$(buildah --tls-verify=$(params.tlsVerify) from image-registry.openshift-image-registry.svc:5000/openshift/ubi-minimal:latest)
            else
              CONTAINER=$(buildah --tls-verify=$(params.tlsVerify) from image-registry.openshift-image-registry.svc:5000/openshift/jdk-11-app-runner:latest )
            fi
            case $(params.build-type) in
              spring-boot)
              buildah copy ${CONTAINER} ./target/app.jar /deployments/app.jar
              ;;
              quarkus-jvm)
              buildah copy ${CONTAINER} ./target/lib/* /deployments/lib/
              buildah copy ${CONTAINER} ./target/app-runner.jar /deployments/app.jar
              ;;
              quarkus-fast-jar)
              buildah copy ${CONTAINER} ./target/quarkus-app/lib/ /deployments/lib/
              buildah copy ${CONTAINER} ./target/quarkus-app/quarkus-run.jar /deployments/app.jar
              buildah copy ${CONTAINER} ./target/quarkus-app/app/ /deployments/app/
              buildah copy ${CONTAINER} ./target/quarkus-app/quarkus/ /deployments/quarkus/
              ;;
              quarkus-native)
              buildah copy ${CONTAINER} ./target/app-runner /application
              buildah config --entrypoint '["/application", "-Dquarkus.http.host=0.0.0.0", "${JAVA_OPTIONS}"]' --port 8080 ${CONTAINER}
            esac
            buildah config --label GIT_COMMIT=$(params.git-checkout-sha) --author="Tekton" ${CONTAINER}
            buildah commit ${CONTAINER} ${DESTINATION_IMAGE}
            buildah unmount ${CONTAINER}
          env:
          - name: user.home
            value: /tekton/home
          workingDir: "/workspace/source"
        - name: push-image
          image: image-registry.openshift-image-registry.svc:5000/openshift/buildah:nonroot
          imagePullPolicy: Always
          script: |
            echo "tekton:x:$(id -u):0:tekton user:${HOME}:/sbin/nologin" >> /etc/passwd
            DESTINATION_IMAGE="image-registry.openshift-image-registry.svc:5000/$(context.taskRun.namespace)/$(params.app-name):latest"
            buildah push --tls-verify=$(params.tlsVerify) ${DESTINATION_IMAGE} docker://${DESTINATION_IMAGE}
          workingDir: "/workspace/source"
        volumes:
        - name: varlibc
          emptyDir: {}
        - name: maven-settings
          configMap:
            name: maven-settings-xml
  - objectTemplate: |
      apiVersion: tekton.dev/v1beta1
      kind: Task
      metadata:
        name: config-app
        namespace: {{ .Name }}
      spec:
        params:
        - name: config-git-repo-url
          type: string
          description: "Git Repository URL"
        - name: config-git-branch
          type: string
          description: "Git Branch to clone"
          default: "main"
        - name: config-git-path
          type: string
          description: "Config Path"
          default: "/"
        - name: app-name
          description: the application name
        steps:
        - name: prep-build
          image: image-registry.openshift-image-registry.svc:5000/openshift/maven-jdk-mandrel-builder:latest
          imagePullPolicy: IfNotPresent
          script: |
            git clone -b $(params.config-git-branch) --single-branch $(params.config-git-repo-url) /workspace/source
          env:
          - name: user.home
            value: /tekton/home
          workingDir: "/"
        - name: apply
          image: image-registry.openshift-image-registry.svc:5000/openshift/origin-cli:latest
          imagePullPolicy: IfNotPresent
          workingDir: /workspace/source
          script: |
            echo -----------------------------------
            echo "Applying artifacts in $(params.config-git-path)/apply directory"
            for i in $(ls ./$(params.config-git-path)/apply)
            do
              sed -i "s|--APP_NAME--|$(params.app-name)|g" ./$(params.config-git-path)/apply/${i}
            done
            oc apply -f ./$(params.config-git-path)/apply
            echo "Setting deployment image path"
            DESTINATION_IMAGE="image-registry.openshift-image-registry.svc:5000/$(context.taskRun.namespace)/$(params.app-name):latest"
            oc set image deployment/$(params.app-name) $(params.app-name)=${DESTINATION_IMAGE}
            if [ -f ./$(params.config-git-path)/patch/deployment-patch.yaml ]
            then
              echo "Patching deployment"
              sed -i "s|--APP_NAME--|$(params.app-name)|g" ./$(params.config-git-path)/patch/deployment-patch.yaml
              oc patch deployment $(params.app-name) --patch "$(cat ./$(params.config-git-path)/patch/deployment-patch.yaml)"
            fi
            echo -----------------------------------
  - objectTemplate: |
      apiVersion: tekton.dev/v1beta1
      kind: Task
      metadata:
        name: deploy-app
        namespace: {{ .Name }}
      spec:
        params:
        - name: app-name
          description: the application name
        steps:
        - name: rollout
          image: image-registry.openshift-image-registry.svc:5000/openshift/origin-cli:latest
          imagePullPolicy: IfNotPresent
          workingDir: /workspace
          script: |
            echo Rolling out $(params.app-name)
            oc rollout restart deployment/$(params.app-name)
            echo -----------------------------------
  - objectTemplate: |
      apiVersion: tekton.dev/v1beta1
      kind: Task
      metadata:
        name: create-webhook
        namespace: {{ .Name }}
      spec:
        params:
        - name: app-name
          description: the application name
        - name: git-repo-url
          description: "The GitHub repo where the webhook will be created"
        - name: git-branch
          description: "The GitHub repo where the webhook will be created"
        volumes:
        - name: gitlab-secret
          secret:
            secretName: gitlab-secret
        steps:
        - name: create-route
          image: image-registry.openshift-image-registry.svc:5000/openshift/origin-cli:latest
          imagePullPolicy: IfNotPresent
          volumeMounts:
          - name: gitlab-secret
            mountPath: /var/secret
          env:
          - name: user.home
            value: /tekton/home
          workingDir: "/workspace"
          script: |
            echo -----------------------------------
            echo "Creating Route for Event Listener"
            SVC_NAME=$(oc get el $(params.app-name)-listener -o=jsonpath='{.status.configuration.generatedName}')
            oc expose service ${SVC_NAME}
            echo $(oc get route ${SVC_NAME} -o=jsonpath='{.spec.host}') > /workspace/hook-url
            echo -----------------------------------
        - name: create-webhook
          image: image-registry.openshift-image-registry.svc:5000/openshift/maven-jdk-mandrel-builder:latest
          imagePullPolicy: IfNotPresent
          volumeMounts:
          - name: gitlab-secret
            mountPath: /var/secret
          env:
          - name: user.home
            value: /tekton/home
          workingDir: "/workspace"
          script: |
            echo -----------------------------------
            echo "Creating Webhook"
            PROJECT_PATH=$(echo $(params.git-repo-url) | cut -d"/" -f4- | cut -d"." -f1 | sed "s|/|%2F|g")
            API_URL=$(echo $(params.git-repo-url) | cut -d"/" -f-3)/api/v4/projects/${PROJECT_PATH}/hooks
            HOOK_URL=http://$(cat /workspace/hook-url)
            curl -X POST -H "PRIVATE-TOKEN: $(cat /var/secret/access-token)" -d "push_events=true" -d "push_events_branch_filter=$(params.git-branch)" -d "token=$(cat /var/secret/hook-token)" -d "url=${HOOK_URL}" -d "enable_ssl_verification=false" ${API_URL}
            echo -----------------------------------